* Code challenge - BST
** Summary
   
   Your company needs you to implement a Binary Search Tree (BST), using the language of your choice.
   Your solution will be utilized by several different teams throughout your organization.
   Initially, this BST only needs to support integers. 
   
** Requirements:
   
   + The BST must be built from a list of integers.
   + Implement a method that returns the deepest nodes in the BST along with their depth
   
** Example:
   
   Input: 12,11,90,82,7,9
   Output: deepest, 9; depth, 3
  
** What we are looking for:
*** TODO Correctness - will your solution produce the desired results?
*** TODO Conciseness - does your solution balance clarity and brevity?
*** TODO Maintainability - does your code stand up to changing needs?
*** TODO Anti-patterns - does your solution avoid anti-patterns?
**** TODO Which ones?

** Testing

   #+begin_src shell
     docker-compose up
   #+end_src

   Test coverage report:
   
   #+begin_src shell
     open ./cover/index.html
   #+end_src
   
** Tasks
*** DONE local repo
*** TODO Github repo
*** TODO Check input for correctness
*** DONE Insert w/duplicate
*** DONE Edge case - empty tree
*** DONE Edge case - duplicate numbers
*** DONE Use key/value in tree
*** DONE Search for element
*** DONE Insert wo/duplicate
*** DONE Dockerfile
*** DONE README
*** DONE Tests setup
*** DONE Input variable number of integers
*** DONE Logging
*** DONE Node class
*** DONE Output depth
*** DONE Output deepest nodes
*** DONE Construct
*** DONE Insert 
*** DONE Visitor - stdout
*** DONE Visitor - depth
*** DONE Visitor - deepest
*** DONE Visitor - search
*** WAIT Delete node
